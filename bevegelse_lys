/*
written by Charles Gantt and Curtis Gauger from 
http://www.themakersworkbench.com.
*/
 
//Tell the Arduino IDE to include the FastLED library
#include <FastLED.h>
 
//Setup the variables for the first sensor
const int trigPin1 = 9;
const int echoPin1 = 10;
 
//Setup the variables for the second sensor
const int trigPin2 = 3;
const int echoPin2 = 2; 

// Number of leds in strip
#define NUM_LEDS 130

/* 
int upper_step = {1-57 tot: 57}:
int  middle_step = {58-124, tot: 67};
int lower_step= {125-221, tot:96};

*/
 
// NeoPixel's data line connected to?
#define DATA_PIN 6 
 
// Define the array of leds
CRGB leds[NUM_LEDS];
 
void setup(){
// initialize serial communication:
  Serial.begin(9600);
  FastLED.addLeds<NEOPIXEL, DATA_PIN>(leds, NUM_LEDS);
}
 
void loop()
{
  // establish variables for duration of the ping,
  // and the distance result in inches and centimeters:
  long 
    duration1, 
    duration2, 
    inches1, 
    inches2, 
    cm1, 
    cm2;
 

  // The sensor is triggered by a HIGH pulse of 
  //10 or more microseconds.
  // Give a short LOW pulse beforehand to 
  //ensure a clean HIGH pulse:

   //---------- SENSOR 1 ----------
  pinMode(trigPin1, OUTPUT);
  digitalWrite(trigPin1, LOW);
  delayMicroseconds(2);
  digitalWrite(trigPin1, HIGH);
  delayMicroseconds(10);
  digitalWrite(trigPin1, LOW);
 
  pinMode(echoPin1, INPUT);
  duration1 = pulseIn(echoPin1, HIGH);

 //---------- SENSOR 2 ----------
  pinMode(trigPin2, OUTPUT);
  digitalWrite(trigPin2, LOW);
  delayMicroseconds(2);
  digitalWrite(trigPin2, HIGH);
  delayMicroseconds(10);
  digitalWrite(trigPin2, LOW);
 
  pinMode(echoPin2, INPUT);
  duration2 = pulseIn(echoPin2, HIGH);
 


  // convert the time into a distance
  inches1 = microsecondsToInches(duration1);
  cm1 = microsecondsToCentimeters(duration1);

  inches2 = microsecondsToInches(duration2);
  cm2 = microsecondsToCentimeters(duration2);
 
  Serial.print(cm1);
  Serial.print("cm - first sensor");
  Serial.println();
  Serial.print(cm2);
  Serial.print("cm - second sensor");
  Serial.println();
 
 if (cm1 <= 100) {
  fill_solid(&(leds[5]), 10, CRGB::Green);
  FastLED.show();
}

 if (cm2 <= 100) {
  fill_solid(&(leds[20]), 30, CRGB::HotPink);
  FastLED.show();
}

else if (cm1 >= 120) {fill_solid( &(leds[0]), NUM_LEDS, CRGB::Black);
 FastLED.show();
}

/*if(cm>120){
  fill_solid(&(leds[5]), 8, CRGB::HotPink);
  FastLED.show();
}
*/
/*

if (cm <= 100)  {fill_solid( &(leds[0]), NUM_LEDS, CRGB::Blue);
 FastLED.show();
}
*/



delay(100);
}
 
long microsecondsToInches(long microseconds)
{
// According to Parallax's datasheet for the PING))), there are
// 73.746 microseconds per inch (i.e. sound travels at 
//1130 feet per second).  This gives the distance travelled 
//by the ping, outbound and return, so we divide by 2 to get the 
//distance of the obstacle. 
//See: http://www.parallax.com/dl/docs/prod/acc/28015-PING-v1.3.pdf
  return microseconds / 74 / 2;
}
 
long microsecondsToCentimeters(long microseconds)
{
  // The speed of sound is 340 m/s or 29 microseconds per
  // centimeter. The ping travels out and back, so to find 
  //the distance of the object we take half of the distance 
  //travelled.
  return microseconds / 29 / 2;
}
